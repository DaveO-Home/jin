#!/usr/bin/env /home/daveo/installs/jin-0.1.0/bin/jlin 
package j9.mod.info;
/*
    Coded to run on both linux and windows - if JAVA_HOME is Java9, jin will execute as a module.
    Compiles the java 9 modules definition file module-info.java
    Builds the jin9.jar with the new module definition.
*/

import java.io.File;
import java.util.logging.*;
import jin.shell.*;

/* Jin scripts are basically Java so you can use a java editor in your favorate IDE.
*  Just uncomment class def below, you will still have errors but at least there should be
*  code linting. Don't forget to comment before using.
*/
//public class J9Mod  {

    private final static Logger logger = Logger.getLogger(J9Mod.class.getName());
    public static final String fSeparator = System.getProperty("file.separator");
    /* Use dollorSign char to avoid Jin from asking for a value */
    public final static char dollarSign = (char)0x24;
    private final static boolean isWindows = System.getProperty("os.name").startsWith("Windows") ? true : false;
    private static String jarOSCommand = !isWindows? dollarSign + "{JAVA_HOME}/bin/jar": "\"%JAVA_HOME%\"/bin/jar.exe"; 
    private static String jarCommand = jarOSCommand + " --create --file jarFile --main-class jin.shell.JinScript -C classDir .";
    private static String OSCompile = !isWindows? dollarSign + "{JAVA_HOME}/bin/javac": "\"%JAVA_HOME%\"/bin/javac.exe";
    private static String jCompile = OSCompile + " -g:none -d classDir -target srcLevel -source srcLevel  srcFile -Xlint:-unchecked,-cast,-options";
    private static String jarFile = "jin9.jar";
    private static String jarDest = !isWindows? "../lib/jin/": "../lib/jin/new";
    private static String classDir = "../classes/jar";
    private static String srcLevel = "1.9";
    private static String srcFile = "../src/module-info.java";
    private static String extractCommand = "cd ../classes/jar ; " + jarOSCommand + " xf ../../lib/jin/jarFile";
    // private static String extractCommand = "cd ./build/classes/jar ; " + jarOSCommand + " xf ../../../jarFile";

    public void program(Hashtable h) throws Exception {

        String workingDir = System.getenv("WD");
        if(workingDir == null) {
            lout("Your working directory is not set, see help");
        }
        String help = "";
        if(h.get(dollarSign + "1") != null) {
            help = ((String)h.get(dollarSign + "1")).toLowerCase();
        }
        if(help.contains("help")) {
            help();
            return;
        }  
        jarFile = h.get("JAR") != null ? (String) h.get("JAR") : jarFile;
        extractCommand = extractCommand.replace("jarFile", jarFile);
        if(isWindows) {
            extractCommand = extractCommand.replace(" ; ", " && ").replace("/", fSeparator);
        }
        jarDest = h.get("JARDEST") != null ? (String) h.get("JARDEST") : jarDest;
        classDir = h.get("CLASSDIR") != null ? (String) h.get("CLASSDIR") : classDir;
        jarCommand = jarCommand.replace("jarFile", jarDest + jarFile).replace("classDir", classDir).replace("/", fSeparator);

        srcLevel = h.get("LEVEL") != null ? (String) h.get("LEVEL") : srcLevel;
        srcFile = h.get("SRC") != null ? (String) h.get("SRC") : srcFile;
        jCompile = jCompile.replace("srcLevel", srcLevel).replace("srcFile", srcFile).replace("classDir", classDir).replace("/", fSeparator);

        tout("\nExtracting.... " + extractCommand + " ");
        runit(extractCommand);
        tout("\nCompiling.... " + jCompile + " ");
        runit(jCompile);
        tout("Building jar file.... " + jarCommand + " ");
        runit(jarCommand);
        
    }

    private void runit(String cmd) throws Exception {
        /* silent is a Jin public variable that needs to be true to take over the output */
        silent = true;
        try {
           int rc = doit(cmd);
           String od = null;
           while((od = prn.readLine()) != null)
           {
                lout(od);
           }

           String ed = "";
           while((ed = err.readLine()) != null)
           {
                lout(ed);
           }
           rc = endProcess();
           lout("RC="+rc);
        } catch (Exception e) { e.printStackTrace(); throw new Exception("Host Command Failed"); }
   }

    
    private void help() {

        String[][] info = {
            {"\n" + "J9Mod", "Script", "Compiles src/modules-info.java and\n\tbuilds new jar file when running under Java 9"}, 
            {"WD", "String", "Working Directory for script files; \n\texport WD=<directory> to override \n\tIf set to ./ Jin will find the script in the current dir;\n\t"
                + "default directory: " + dollarSign + "JIN_APP" + fSeparator + "scripts"},
            {"help", "String", "This Help"},
            {"Note", "", "Running J9Mod requires setting the WD environment variable \n\tbecause it is located in a non-script directory."}
        };
    
        for (int i = 0; i < info.length; i++) {
            lout(info[i][0] + "=" + info[i][1] + "\t" + info[i][2]);
        }
    }
    private String whichFiles = ".";
    private int doit(String cmd) throws Exception { 
        return host(cmd); 
    }

//}
